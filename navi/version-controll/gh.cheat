% gh, version-controll
# Clone a repository
gh repo clone <owner>/<repository>

# Fork and clone a repository: (good for opensource contribution)
gh repo fork <owner>/<repository> --clone

# Display a specific issue in the default web browser:
gh issue view <issue_number> --web

# List the last 10 issues with the `bug` label:
gh issue list --limit 10 --label "bug"

# Display the status of issues relevant to the user, in a specific repository:
gh issue status --repo <owner>/<repository>

# Open the homepage of the current repository in the default web browser:
gh browse

# Open the homepage of a specific repository in the default web browser:
gh browse <owner>/<repository>

# Display help about environment variables that can be used with `gh`:
gh environment

# Interactively select a run to see information about the jobs:
gh run view

# Display information about a specific run:
gh run view <workflow_run_number>

# Display the log of a job:
gh run view --job=job_number --log

# Interactively select an active run and wait until it's done:
gh run watch

# Re-run a specific workflow:
gh run rerun <workflow_run_number>

# Interactively select a workflow to view the latest jobs for:
gh workflow view

# View a specific workflow in the default browser:
gh workflow view <id|workflow_name|filename.yml> --web

# Run a manual workflow with parameters:
gh workflow run <id|workflow_name|filename.yml> --raw-field param1=value1 --raw-field param2=value2 ...

# Run a manual workflow using a specific branch or tag with JSON parameters from `stdin`:
echo '{"param1": "value1", "param2": "value2", ...}' | gh workflow run <id|workflow_name|filename.yml> --ref <branch|tag_name>

# Enable or disable a specific workflow:
gh workflow <enable|disable> <id|workflow_name|filename.yml>

# Display the subcommand help:
gh api --help

# Display the releases for the current repository in JSON format:
gh api repos/:owner/:repo/releases

# Display the result of a GraphQL query in JSON format:
gh api graphql --field name='<:repo>' --raw-field '<query>'

# Send a request using a custom HTTP method:
gh api --method <GET|POST|PUT|DELETE> <endpoint>

# Include the HTTP response headers in the output:
gh api --include <endpoint>

# Send a request to a specific GitHub Enterprise Server:
gh api --hostname <github.example.com> <endpoint>

# Check out a specific pull request locally:
gh pr checkout <pr_number>

# View the changes made in the pull request for the current branch:
gh pr diff

# (Require gum) List all PRs for the current GitHub repository and checkout the chosen PR.
gh pr list | cut -f1,2 | gum choose | cut -f1 | xargs gh pr checkout
