% git, version-controll

# Initialize a git repository
git init

# List all branches (local and remote; the current branch is highlighted by `*`):
git branch --all

# List which branches include a specific Git commit in their history:
git branch --all --contains <commit_hash>

# Show the name of the current branch:
git branch --show-current

# Create new branch based on the current commit:
git branch <branch_name>

Create new branch based on a specific commit:
git branch <branch_name> <commit_hash>

# Rename a branch (must not have it checked out to do this):
git branch -m <old_branch_name> <new_branch_name>

# Delete a local branch (must not have it checked out to do this):
git branch -d <branch_name>

# (Gum Needed) List all branches and choose which branches to delete.
git branch | cut -c 3- | gum choose --no-limit | xargs git branch -D

# Delete a remote branch:
git push <remote_name> --delete <remote_branch_name>

# Clone a git repository
git clone -b <branch_name> <repository> <clone_directory>

# Shallow clone with depth 1 with all branches and submoudles
git clone --depth=1 --no-single-branch --recurse-submodules <repository> <clone_directory>

# List only local configuration entries (stored in .git/config in the current repository)
git config --list --local

# List only global configuration entries (stored in ~/.gitconfig)
git config --list --global

# List only system configuration entries (stored in /etc/gitconfig), and show their file location
git config --list --system --show-origin

# Edit the Git configuration for the current repository in the default editor
git config --edit

# Edit the global Git configuration in the default editor
git config --global --edit

# Rebase upstream master into local/origin master (This will be useful when people haven't cloned your repository.)
git fetch <remote_name>
git checkout master
git rebase <remote_name>/master
git fetch --unshallow origin
git push -f origin master

# Merge upstream master into local/origin master (This will be useful when people have cloned your repository.)
git fetch <remote_name>
git checkout master
git merge <remote_name>/master
git fetch --unshallow origin
git push -f origin master


# View all available remote for a git repository
git remote --verbose

# Adds a remote for a git repository
git remote add <remote_name> <remote_url>

# Rename a name of remote repository.
git remote rename <old_remote_name> <new_remote_name>

# Remove a remote for a git repository
git remote remove <remote_name>

# Switch to an existing branch
git switch <branch_name>

# Create a new branch and switch to it
git switch --create <branch_name>

# Create a new branch based on an existing commit and switch to it
git switch --create <branch_name> <commit>

# Switch to the previous branch
git switch -

# Switch to a branch and update all submodules to match
git switch --recurse-submodules <branch_name>

# Switch to a branch and automatically merge the current branch and any uncommitted changes into it
git switch --merge <branch_name>

# Install a repository's specified submodules
git submodule update --init --recursive

# Add a Git repository as a submodule
git submodule add <repository_url>

# Add a Git repository as a submodule at the specified directory
git submodule add <repository_url> <path/to/directory>

# Update every submodule to its latest commit
git submodule foreach git pull

# Show the changes to files in a Git repository.
git status

# Show output in [s]hort format along with [b]ranch info
git status -sb

# Don't show untracked files in the output
git status --untracked-files=no

# Show only staged (added, but not yet committed) changes
git diff --staged

# Compare a single file between two branches or commits
git diff <branch_1>..<branch_2> [--] <path/to/file>

# Compare different files from the current branch to other branch
git diff <branch>:<path/to/file2> <path/to/file>

# Add all files (tracked and untracked)
git add -A

# Interactively stage parts of files
git add -p

# Interactively stage parts of files
git add -p <path/to/file>

# Commit staged files to the repository with a message
git commit -m "<message>"

# Update the last commit by adding the currently staged changes, changing the commit's hash
git commit --amend

# Commit only specific (already staged) files
git commit <path/to/file1> <path/to/file2>

# Send local changes in the current branch to its default remote counterpart
git push 

# Send changes from a specific local branch to its remote counterpart
git push <remote_name> <local_branch>

# Send changes from a specific local branch to its remote counterpart, and set the remote one as the default push/pull target of the local one
git push -u <remote_name> <local_branch>

# Send changes from a specific local branch to a specific remote branch
git push <remote_name> <local_branch>:<remote_branch>

# Remove remote branches that don't have a local counterpart
git push --prune <remote_name>

# Publish tags that aren't yet in the remote repository
git push --tags

# Download changes from default remote repository and merge it:
git pull

# Download changes from default remote repository and use fast-forward:
git pull --rebase

# Download changes from given remote repository and branch, then merge them into HEAD:
git pull <remote_name> <branch>

# Revert the most recent commit
git revert HEAD

# Revert the 5th last commit
git revert HEAD~4

# Revert a specific commit
git revert <shortened_commit_hash>

# Revert multiple commits
git revert <branch_name~5>..<branch_name~2>

# Don't create new commits, just change the working tree
git revert -n <commit-hash>

# Unstage everything
git reset

# Unstage specific file(s)
git reset <path/to/file1> <path/to/file2>

# Undo the last commit, keeping its changes (and any further uncommitted changes) in the filesystem
git reset HEAD~

# Undo the last two commits, adding their changes to the index, i.e. staged for commit
git reset --soft HEAD~2

# Discard any uncommitted changes, staged or not (for only unstaged changes, use git checkout)
git reset --hard

# Reset the repository to a given commit, discarding committed, staged and uncommitted changes since then
git reset --hard <commit_hash>

# Show the history of a particular file or directory, including differences
git log -p path/to/file_or_directory

# Show a graph of commits in the current branch using only the first line of each commit message(add --pretty option to show details).
git log --oneline --graph

# Show a graph of all commits, tags and branches in the entire repo(add --pretty option to show details.)
git log --oneline --decorate --all --graph

# Show a graph of all commits, tags and branches with a long graph.
git log --oneline --decorate --all --graph --pretty

# Show commits between two dates (yyyy-mm-dd)
git log --before="<date1>" --after="<date2>" 

# (Gum Needed) Filter through your git history searching for commit messages, copying the commit hash of the commit you select.
git log --oneline | gum filter | cut -d' ' -f1 # | copy

# List all tags:
git tag

# Create a tag with the given name pointing to the current commit:
git tag <tag_name>

# Create a tag with the given name pointing to a given commit:
git tag <tag_name> <commit>

# Create an annotated tag with the given message:
git tag <tag_name> -m <tag_message>

# Delete the tag with the given name:
git tag -d <tag_name>

# Get updated tags from upstream:
git fetch --tags

# List all tags whose ancestors include a given commit:
git tag --contains <commit>
