% yarn, nodejs, pkg-mgr

# Install all dependencies referenced in the package.json file (the install is optional)
yarn install

# Install a module globally
yarn global add <module_name>

# Install a module and save it as a dependency to the package.json file (add --dev to save as a dev dependency)
yarn add <module_name@version>

# Uninstall a module and remove it from the package.json file
yarn remove <module_name>

# Interactively create a package.json file
yarn init

# Identify whether a module is a dependency and list other modules that depend upon it
yarn why <module_name>

# Remove all the local archives :
yarn cache clean

# Remove all the archives stored in the ~/.yarn directory
yarn cache clean --mirror

# Run a package in a temporary environment.
yarn dlx <command>

# Install multiple packages for a single command(You can alter '-p' to '--package')
yarn dlx -p <command1> -p <command2>

# Set up sdks for vscode. This command will generate a new directory called .yarn/sdks. (To support features like go-to-definition a plugin like ZipFS is needed)
yarn dlx @yarnpkg/sdks vscode

# Set up sdks for vim. This command will generate a new directory called .yarn/sdks and create a .vim/coc-settings.json
yarn dlx @yarnpkg/sdks vim

# Scaffold react project 
yarn dlx create-react-app

# Scaffold vite project on 
yarn dlx create-vite

# Execute a shell script. If you want to execute two or more commands, wrap the commands with dobule quote.
yarn exec <commandName>

# Run a Node script
yarn node <module_name>

# Checks for known security issues with the installed packages. The output is a list of known issues.
yarn npm audit

# Audit dependencies in all workspaces :
yarn npm audit --all

# Login to the default registry
yarn npm login

# Publish the active workspace to the npm registry.
yarn npm publish

# Add a tag for a specific version of a package.
yarn npm tag add <package> <tag>

# List all dist-tags of a package.
yarn npm tag list [package]

# Remove a tag from a package.
yarn npm tag remove <package> <tag>

# Create an archive from the active workspace
yarn pack

# Download and activate the "@yarnpkg/plugin-exec" plugin (shorthand)
yarn plugin import exec

# Download and activate a community plugin
yarn plugin import <https://example.org/path/to/plugin.js>

# Activate a local plugin
yarn plugin import </path/to/plugin.js>

# List the official plugins
yarn plugin list

# Remove a plugin imported from the Yarn repository
yarn plugin remove @yarnpkg/plugin-typescript

# Remove a plugin imported from a local file
yarn plugin remove my-local-plugin

# List the active plugins.
yarn plugin runtime

# Rebuild all packages
yarn rebuild

# Open the search window
yarn search

# Enforce a package resolution.
yarn set resolution <descriptor> <resolution>

# Lock the Yarn version used by the project. (name of version would be latest, classic, berry, and so on)
yarn set version <version>

# Will now upgrade packages across all workspaces
yarn up

# Run a command within the specified workspace.
yarn workspace <workspaceName> <commandName>

# Run a command on all workspaces.
yarn workspaces foreach <commandName>

# List all available workspaces.
yarn workspaces list
